{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forBytecode = exports.forContract = void 0;\n\nfunction forContract(contract) {\n  const {\n    contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode,\n    deployedBytecode,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  } = contract;\n  return {\n    contract_name: contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: forBytecode(bytecode),\n    deployedBytecode: forBytecode(deployedBytecode),\n    unlinked_binary: forBytecode(bytecode),\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  };\n}\n\nexports.forContract = forContract;\n\nfunction forBytecode(bytecode) {\n  if (!bytecode) {\n    return bytecode;\n  }\n\n  if (typeof bytecode === \"string\") {\n    return bytecode;\n  }\n\n  let {\n    bytes,\n    linkReferences\n  } = bytecode;\n  linkReferences = linkReferences || []; // inline link references - start by flattening the offsets\n\n  const flattenedLinkReferences = linkReferences // map each link ref to array of link refs with only one offset\n  .map(_ref => {\n    let {\n      offsets,\n      length,\n      name\n    } = _ref;\n    return offsets.map(offset => ({\n      offset,\n      length,\n      name\n    }));\n  }) // flatten\n  .reduce((a, b) => [...a, ...b], []); // then overwite bytes with link reference\n\n  bytes = flattenedLinkReferences.reduce((bytes, _ref2) => {\n    let {\n      offset,\n      name,\n      length\n    } = _ref2;\n    // length is a byte offset\n    const characterLength = length * 2;\n    let linkId = `__${name.slice(0, characterLength - 2)}`;\n\n    while (linkId.length < characterLength) {\n      linkId += \"_\";\n    }\n\n    const start = offset * 2;\n    return `${bytes.substring(0, start)}${linkId}${bytes.substring(start + characterLength)}`;\n  }, bytes);\n  return `0x${bytes}`;\n}\n\nexports.forBytecode = forBytecode;","map":null,"metadata":{},"sourceType":"script"}