{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction toSubdomainLabelMapper(_ref) {\n  let [f, d] = _ref;\n  return d === null ? f : `${f}${d[0]}${d[1]}`;\n}\n\nfunction toSubdomainLabelUnmapper(value) {\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Unsupported');\n  }\n\n  if (value.length === 1) {\n    return [value[0], null];\n  }\n\n  return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\n\nfunction subdomainLabel() {\n  const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n  const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n  return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, {\n    maxLength: 61\n  }), alphaNumericArb)))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel));\n}\n\nfunction labelsMapper(elements) {\n  return `${elements[0].join('.')}.${elements[1]}`;\n}\n\nfunction labelsUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const lastDotIndex = value.lastIndexOf('.');\n  return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\n\nexport function domain() {\n  const alphaNumericArb = buildLowerAlphaArbitrary([]);\n  const publicSuffixArb = stringOf(alphaNumericArb, {\n    minLength: 2,\n    maxLength: 10\n  });\n  return convertFromNext(convertToNext(tuple(array(subdomainLabel(), {\n    minLength: 1,\n    maxLength: 5\n  }), publicSuffixArb)).map(labelsMapper, labelsUnmapper).filter(d => d.length <= 255));\n}","map":null,"metadata":{},"sourceType":"module"}