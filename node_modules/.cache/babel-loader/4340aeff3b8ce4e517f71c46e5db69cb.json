{"ast":null,"code":"const contractNames = require(\"./contracts.json\");\n\nconst abis = require(\"./abi\");\n\nconst getAdaptedContract = _ref => {\n  let {\n    address,\n    abi,\n    ethers\n  } = _ref;\n\n  const {\n    Contract\n  } = require(\"@ethersproject/contracts\");\n\n  let providerOrSigner = ethers;\n\n  try {\n    providerOrSigner = ethers.getSigner();\n  } catch (e) {\n    console.debug(\"Ethers.js signer is not available. Using read-only mode.\");\n  }\n\n  const ethersContract = new Contract(address, abi, providerOrSigner); // Create adapter for web3.js Contract.contract.methods.encodeABI\n\n  const web3EncodingAdapter = {};\n  ethersContract.interface.fragments.forEach(fragment => {\n    web3EncodingAdapter[fragment.name] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return {\n        encodeABI: () => {\n          return ethersContract.interface.encodeFunctionData(fragment, args);\n        }\n      };\n    };\n  });\n  ethersContract.contract = {\n    methods: { ...web3EncodingAdapter\n    }\n  };\n  return ethersContract;\n};\n\nfunction defaultContractLoader(name) {\n  if (name in abis) {\n    return {\n      contractName: name,\n      abi: abis[name]\n    };\n  } else throw new Error(`Cannot load contract \"${name}\"`);\n}\n\nfunction setTruffleContractDefaults(c, networkId, from) {\n  c.autoGas = true;\n  c.estimateGas = 1.25;\n  networkId && c.setNetwork(networkId);\n  from && c.defaults({\n    from\n  });\n}\n\nconst loadContracts = async _ref2 => {\n  let {\n    isTruffle,\n    ethers,\n    web3,\n    from,\n    additionalContracts,\n    contractLoader,\n    networkId\n  } = _ref2;\n  // use set to eliminate duplicated entries\n  const allContractNames = Array.from(new Set([...contractNames, ...(additionalContracts || [])]));\n  contractLoader = contractLoader || defaultContractLoader;\n  let contracts = {};\n\n  if (ethers) {\n    try {\n      console.debug(`Using @superfluid-finance/js-sdk within the Ethers.js environment.\n                Peer dependency @ethersproject/contract is required.`);\n      await Promise.all(allContractNames.map(async name => {\n        const contract = await contractLoader(name);\n        contracts[name] = {\n          at: address => getAdaptedContract({\n            address,\n            ethers,\n            abi: contract.abi\n          }),\n          abi: contract.abi,\n          contractName: name\n        };\n      }));\n\n      if (from) {\n        throw new Error(\"Ethers mode does not support default from address\");\n      }\n    } catch (e) {\n      throw Error(`could not load ethers environment contracts. ${e}`);\n    }\n  } else if (web3) {\n    try {\n      const TruffleContract = require(\"@truffle/contract\");\n\n      console.debug(`Using @superfluid-finance/js-sdk in a non-native Truffle environment.\n                Peer dependency @truffle/contract is required.`);\n\n      if (from) {\n        console.log(\"Set default from address to\", from);\n      } else {\n        const accounts = await web3.eth.getAccounts();\n        from = accounts[0];\n        console.log(\"Set default from address to the first account\", from);\n      }\n\n      await Promise.all(allContractNames.map(async name => {\n        const c = contracts[name] = TruffleContract(await contractLoader(name));\n        c.setProvider(web3.currentProvider);\n        setTruffleContractDefaults(c, networkId, from);\n      }));\n    } catch (e) {\n      throw Error(`could not load non-truffle environment contracts. ${e}`);\n    }\n  } else if (isTruffle) {\n    try {\n      console.debug(`Using @superfluid-finance/js-sdk within a Truffle native environment.\n                Truffle artifacts must be present.`);\n\n      if (from) {\n        console.log(\"Set default from address to\", from);\n      }\n\n      allContractNames.forEach(name => {\n        const c = contracts[name] = artifacts.require(name);\n\n        setTruffleContractDefaults(c, networkId, from);\n      });\n    } catch (e) {\n      throw Error(`could not load truffle artifacts. ${e}`);\n    }\n  } else {\n    throw new Error(\"Unknown mode\");\n  }\n\n  return contracts;\n};\n\nmodule.exports = loadContracts;","map":null,"metadata":{},"sourceType":"script"}