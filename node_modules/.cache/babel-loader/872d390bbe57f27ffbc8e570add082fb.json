{"ast":null,"code":"const {\n  GasMeterJSONReporter,\n  GasMeterHTMLReporter\n} = require(\"./gasReporter\");\n\nclass Formatter {\n  constructor(web3) {\n    this.web3 = web3;\n    this.BN = this.web3.utils.BN;\n  }\n\n  formatBigNumber(key, value) {\n    switch (key) {\n      case \"cost\":\n      case \"totalCost\":\n      case \"avgCost\":\n        value = `${this.web3.utils.fromWei(value)} ETH`;\n        break;\n\n      case \"totalTx\":\n      case \"gas\":\n      case \"totalGas\":\n      case \"minGas\":\n      case \"maxGas\":\n      case \"avgGas\":\n        value = value.toString(10);\n        break;\n\n      case \"gasPrice\":\n        value = `${this.web3.utils.fromWei(value, \"gwei\")} GWEI`;\n        break;\n    }\n\n    return value;\n  }\n\n  formatObject(x) {\n    const result = {};\n    Object.keys(x).forEach(key => {\n      var value = x[key];\n\n      if (this.BN.isBN(value)) {\n        value = this.formatBigNumber(key, value);\n      }\n\n      result[key] = value;\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = class GasMeter {\n  constructor(web3, outputFormat, gasPrice) {\n    this.web3 = web3;\n    this.BN = this.web3.utils.BN;\n\n    switch (outputFormat) {\n      case \"JSON\":\n        this.reporter = new GasMeterJSONReporter({});\n        break;\n\n      case \"HTML\":\n        this.reporter = new GasMeterHTMLReporter({});\n        break;\n\n      case \"TENDERLY\":\n        // TODO\n        break;\n\n      default:\n        throw new Error(`Unsuported report type ${outputFormat}`);\n    }\n\n    this.gasPrice = new this.BN(gasPrice);\n    this.records = [];\n    this.aggregates = {};\n    this.formatter = new Formatter(this.web3);\n  }\n\n  _format() {\n    const formattedAggregates = {};\n    Object.keys(this.aggregates).forEach(actionName => {\n      const bucket = this.aggregates[actionName];\n      formattedAggregates[actionName] = {};\n      Object.keys(bucket).forEach(key => {\n        formattedAggregates[actionName][key] = this.formatter.formatBigNumber(key, bucket[key], this.fiatCurr);\n      });\n    });\n    const formattedRecords = this.records.map(x => {\n      return this.formatter.formatObject(x, this.fiatCurr);\n    });\n    return {\n      aggregates: { ...formattedAggregates\n      },\n      executedTxs: [...formattedRecords]\n    };\n  }\n\n  pushTx(tx, actionName) {\n    const gas = new this.BN(tx.receipt.gasUsed);\n    const cost = gas.mul(this.gasPrice);\n    this.records.push({\n      action: actionName,\n      txHash: tx.tx,\n      gas: gas,\n      gasPrice: this.gasPrice,\n      cost: cost\n    });\n\n    if (!(actionName in this.aggregates)) {\n      this.aggregates[actionName] = {\n        action: actionName,\n        avgGas: new this.BN(\"0\"),\n        avgCost: new this.BN(\"0\"),\n        minGas: new this.BN(\"10000000000000000000000\"),\n        maxGas: new this.BN(\"0\"),\n        totalTx: new this.BN(\"0\"),\n        totalGas: new this.BN(\"0\"),\n        totalCost: new this.BN(\"0\")\n      };\n    }\n\n    const bucket = this.aggregates[actionName];\n    bucket.totalTx = bucket.totalTx.add(new this.BN(\"1\"));\n    bucket.totalGas = bucket.totalGas.add(gas);\n    bucket.totalCost = bucket.totalCost.add(cost);\n    bucket.avgCost = bucket.totalCost.div(bucket.totalTx);\n    bucket.avgGas = bucket.totalGas.div(bucket.totalTx);\n    bucket.minGas = this.BN.min(bucket.minGas, gas);\n    bucket.maxGas = this.BN.max(bucket.maxGas, gas);\n  }\n\n  generateReport(name) {\n    this.reporter.fileName = name;\n\n    const formattedReport = this._format();\n\n    this.reporter.generateReport(formattedReport);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}