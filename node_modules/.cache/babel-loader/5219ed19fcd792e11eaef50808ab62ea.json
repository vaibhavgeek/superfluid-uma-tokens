{"ast":null,"code":"import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n  return tuple(integer().noShrink(), integer(1, 0xffffffff).noShrink()).map(_ref => {\n    let [seed, hashEnvSize] = _ref;\n\n    const producer = () => {\n      const recorded = {};\n\n      const f = (a, b) => {\n        const reprA = stringify(a);\n        const reprB = stringify(b);\n        const hA = hash(`${seed}${reprA}`) % hashEnvSize;\n        const hB = hash(`${seed}${reprB}`) % hashEnvSize;\n        const val = cmp(hA, hB);\n        recorded[`[${reprA},${reprB}]`] = val;\n        return val;\n      };\n\n      return Object.assign(f, {\n        toString: () => {\n          const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify(recorded[k])}`).map(line => `/* ${escapeForMultilineComments(line)} */`);\n          return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n        },\n        [cloneMethod]: producer\n      });\n    };\n\n    return producer();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}