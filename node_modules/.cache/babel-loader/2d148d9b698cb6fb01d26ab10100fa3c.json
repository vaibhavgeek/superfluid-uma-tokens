{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forBytecode = exports.forContract = exports.forContracts = void 0;\n\nfunction forContracts(contracts) {\n  // convert to list\n  return Object.values(contracts).map(forContract);\n}\n\nexports.forContracts = forContracts;\n\nfunction forContract(contract) {\n  const {\n    contractName,\n    contract_name,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode,\n    deployedBytecode,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  } = contract;\n  return {\n    contractName: contract_name || contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: forBytecode(bytecode),\n    deployedBytecode: forBytecode(deployedBytecode),\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  };\n}\n\nexports.forContract = forContract;\n\nfunction forBytecode(bytecode) {\n  if (!bytecode) {\n    return undefined;\n  }\n\n  if (typeof bytecode === \"object\") {\n    return bytecode;\n  }\n\n  const linkReferences = [];\n  const bytes = bytecode.slice(2) // remove 0x prefix\n  .replace(/__[^_]+_*/g, (linkReference, characterOffset) => {\n    const [, name] = linkReference.match(/__([^_]+)_*/);\n    const characterLength = linkReference.length;\n    const offset = characterOffset / 2;\n    const length = characterLength / 2;\n    linkReferences.push({\n      offsets: [offset],\n      name,\n      length\n    });\n    return \"0\".repeat(characterLength);\n  });\n  return {\n    bytes,\n    linkReferences\n  };\n}\n\nexports.forBytecode = forBytecode;","map":null,"metadata":{},"sourceType":"script"}