{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\n\nfunction buildCompleteSetConstraints(constraints) {\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n  const compare = constraints.compare !== undefined ? constraints.compare : (a, b) => a === b;\n  return {\n    minLength,\n    maxLength,\n    compare\n  };\n}\n\nfunction extractSetConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      maxLength: sargs[0]\n    };\n    if (typeof sargs[0] === 'function') return {\n      compare: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  if (args[2] === undefined) {\n    const sargs = args;\n    if (typeof sargs[1] === 'number') return {\n      minLength: sargs[0],\n      maxLength: sargs[1]\n    };\n    return {\n      maxLength: sargs[0],\n      compare: sargs[1]\n    };\n  }\n\n  const sargs = args;\n  return {\n    minLength: sargs[0],\n    maxLength: sargs[1],\n    compare: sargs[2]\n  };\n}\n\nfunction set(arb) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n  const minLength = constraints.minLength;\n  const maxLength = constraints.maxLength;\n  const compare = constraints.compare;\n  const nextArb = convertToNext(arb);\n  const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength, compare));\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}\n\nexport { set };","map":null,"metadata":{},"sourceType":"module"}