{"ast":null,"code":"'use strict'; // Gets all non-builtin properties up the prototype chain\n\nconst getAllProperties = object => {\n  const properties = new Set();\n\n  do {\n    for (const key of Reflect.ownKeys(object)) {\n      properties.add([object, key]);\n    }\n  } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n  return properties;\n};\n\nmodule.exports = function (self) {\n  let {\n    include,\n    exclude\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n    if (include) {\n      return include.some(match);\n    }\n\n    if (exclude) {\n      return !exclude.some(match);\n    }\n\n    return true;\n  };\n\n  for (const [object, key] of getAllProperties(self.constructor.prototype)) {\n    if (key === 'constructor' || !filter(key)) {\n      continue;\n    }\n\n    const descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\n    if (descriptor && typeof descriptor.value === 'function') {\n      self[key] = self[key].bind(self);\n    }\n  }\n\n  return self;\n};","map":null,"metadata":{},"sourceType":"script"}