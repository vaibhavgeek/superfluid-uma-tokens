{"ast":null,"code":"import { array } from './array.js';\nimport { constantFrom } from './constantFrom.js';\nimport { constant } from './constant.js';\nimport { option } from './option.js';\nimport { tuple } from './tuple.js';\nimport { webQueryParameters } from './webQueryParameters.js';\nimport { webFragments } from './webFragments.js';\nimport { webAuthority } from './webAuthority.js';\nimport { webSegment } from './webSegment.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { partsToUrlMapper, partsToUrlUnmapper } from './_internals/mappers/PartsToUrl.js';\nimport { segmentsToPathMapper, segmentsToPathUnmapper } from './_internals/mappers/SegmentsToPath.js';\nexport function webUrl(constraints) {\n  const c = constraints || {};\n  const validSchemes = c.validSchemes || ['http', 'https'];\n  const schemeArb = constantFrom(...validSchemes);\n  const authorityArb = webAuthority(c.authoritySettings);\n  const pathArb = convertFromNext(convertToNext(array(webSegment())).map(segmentsToPathMapper, segmentsToPathUnmapper));\n  return convertFromNext(convertToNext(tuple(schemeArb, authorityArb, pathArb, c.withQueryParameters === true ? option(webQueryParameters()) : constant(null), c.withFragments === true ? option(webFragments()) : constant(null))).map(partsToUrlMapper, partsToUrlUnmapper));\n}","map":null,"metadata":{},"sourceType":"module"}