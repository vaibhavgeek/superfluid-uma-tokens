{"ast":null,"code":"const {\n  getErrorResponse\n} = require(\"./utils/error\");\n\nmodule.exports = class User {\n  /**\n   * @dev Create new Superfluid user object\n   * @param {Framework} sf Superfluid framework object.\n   * @param {string} address The EOA address of the user you want to create.\n   * @param {string} token The address of the supertoken you want to interact with.\n   */\n  constructor(_ref) {\n    let {\n      sf,\n      address,\n      token\n    } = _ref;\n    this.sf = sf;\n    this.address = address;\n    this.token = token;\n  }\n  /**\n   * @dev Returns instantiated details regarding the users' cfa and ida data.\n   * @returns {object} top-level cfa property contains flows: Flow[] and netFlow: number\n   * top-level ida property contains subscriptions: Subscription[]\n   */\n\n\n  async details() {\n    try {\n      const listFlows = this.sf.cfa.listFlows({\n        superToken: this.token,\n        account: this.address\n      });\n      const getNewFlow = this.sf.cfa.getNetFlow({\n        superToken: this.token,\n        account: this.address\n      }).then(x => x.toString());\n      const listSubscriptions = this.sf.ida.listSubscriptions({\n        superToken: this.token,\n        subscriber: this.address\n      });\n      const [flows, netFlow, subscriptions] = await Promise.all([listFlows, getNewFlow, listSubscriptions]);\n      return {\n        cfa: {\n          flows,\n          netFlow\n        },\n        ida: {\n          subscriptions\n        }\n      };\n    } catch (e) {\n      throw getErrorResponse(e, \"user\", \"details\");\n    }\n  }\n  /**\n   * @dev Allows you to create, update or delete a flow from the user you initialized.\n   * @param {string} recipient the recipient of the flow agreement\n   * @param {string} flowRate the agreed upon flowRate\n   * @param {object} options options taken by cfa (userData, onTransaction, by (deleteFlow only))\n   * @returns {Promise<Transaction | undefined>} web3 transaction object or undefined on error\n   * NOTE: !0 in JS evaluates to true as 0 is a falsey value. We also stringify the flowRate,\n   * just in case the user somehow is able to input a number (using JS).\n   */\n\n\n  async flow(_ref2) {\n    let {\n      recipient,\n      flowRate,\n      ...options\n    } = _ref2;\n\n    try {\n      if (!recipient || flowRate == null || flowRate == undefined) throw \"You must provide a recipient and flowRate\";\n      if (typeof flowRate !== \"string\") throw \"You must provide flowRate as a string\";\n      const recipientAddress = recipient.address || recipient;\n      if (flowRate === \"0\") return await this.sf.cfa.deleteFlow({\n        superToken: this.token,\n        sender: this.address,\n        receiver: recipientAddress,\n        ...options\n      });\n      const existingFlow = await this.sf.cfa.getFlow({\n        superToken: this.token,\n        sender: this.address,\n        receiver: recipientAddress\n      });\n      if (existingFlow.flowRate !== \"0\") return await this.sf.cfa.updateFlow({\n        superToken: this.token,\n        sender: this.address,\n        receiver: recipientAddress,\n        flowRate,\n        ...options\n      });\n      return await this.sf.cfa.createFlow({\n        superToken: this.token,\n        sender: this.address,\n        receiver: recipientAddress,\n        flowRate,\n        ...options\n      });\n    } catch (e) {\n      throw getErrorResponse(e, \"user\", \"flow\");\n    }\n  }\n  /**\n   * @dev Create an Index using the IDA.\n   * @param {number} poolId The id of the index.\n   * @returns {Promise<Transaction | undefined>} web3 transaction object or undefined on error\n   */\n\n\n  async createPool(_ref3) {\n    let {\n      poolId: indexId\n    } = _ref3;\n\n    try {\n      if (!indexId) throw \"You must provide a poolId\";\n      const {\n        exist\n      } = await this.sf.ida.getIndex({\n        superToken: this.token,\n        publisher: this.address,\n        indexId\n      });\n      if (exist) throw \"This pool has already been created\";\n      return await this.sf.ida.createIndex({\n        superToken: this.token,\n        publisher: this.address,\n        indexId\n      });\n    } catch (e) {\n      throw getErrorResponse(e, \"user\", \"createPool\");\n    }\n  }\n  /**\n   * @dev Gives shares (units) to a recipient.\n   * @param {string} recipient The recipient of the shares.\n   * @param {number} shares The number of units the recipient will receive.\n   * @param {number} poolId The id of the index.\n   * @returns {Promise<Transaction | undefined>} web3 transaction object or undefined on error\n   */\n\n\n  async giveShares(_ref4) {\n    let {\n      recipient,\n      shares,\n      poolId: indexId\n    } = _ref4;\n\n    try {\n      if (!recipient || !shares || !indexId) throw \"You must provide a recipient, share amount, and poolId\";\n      const recipientAddress = recipient.address || recipient;\n      const {\n        exist\n      } = await this.sf.ida.getIndex({\n        superToken: this.token,\n        publisher: this.address,\n        indexId\n      });\n      if (!exist) throw \"This pool has not been created yet\";\n      return await this.sf.ida.updateSubscription({\n        superToken: this.token,\n        publisher: this.address,\n        indexId,\n        subscriber: recipientAddress,\n        units: shares\n      });\n    } catch (e) {\n      throw getErrorResponse(e, \"user\", \"giveShares\");\n    }\n  }\n  /**\n   * @dev Distributes tokens to subscribers who are approved.\n   * @param {number} poolId The id of the index.\n   * @param {number} amount The amount of tokens to distribute.\n   * @returns {Promise<Transaction | undefined>} web3 transaction object or undefined on error\n   */\n\n\n  async distributeToPool(_ref5) {\n    let {\n      poolId: indexId,\n      amount\n    } = _ref5;\n\n    try {\n      if (!indexId || !amount) throw \"You must provide a poolId and amount\";\n      return await this.sf.ida.distribute({\n        superToken: this.token,\n        publisher: this.address,\n        indexId,\n        amount\n      });\n    } catch (e) {\n      throw getErrorResponse(e, \"user\", \"distributeToPool\");\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}