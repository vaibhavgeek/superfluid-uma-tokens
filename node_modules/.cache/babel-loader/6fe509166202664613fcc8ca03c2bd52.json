{"ast":null,"code":"import { boolean } from '../../boolean.js';\nimport { constant } from '../../constant.js';\nimport { double } from '../../double.js';\nimport { maxSafeInteger } from '../../maxSafeInteger.js';\nimport { oneof } from '../../oneof.js';\nimport { string } from '../../string.js';\nimport { boxedArbitraryBuilder } from '../builders/BoxedArbitraryBuilder.js';\n\nfunction defaultValues() {\n  return [boolean(), maxSafeInteger(), double({\n    next: true\n  }), string(), oneof(string(), constant(null), constant(undefined))];\n}\n\nfunction boxArbitraries(arbs) {\n  return arbs.map(arb => boxedArbitraryBuilder(arb));\n}\n\nfunction boxArbitrariesIfNeeded(arbs, boxEnabled) {\n  return boxEnabled ? boxArbitraries(arbs).concat(arbs) : arbs;\n}\n\nexport function toQualifiedObjectConstraints() {\n  let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  function orDefault(optionalValue, defaultValue) {\n    return optionalValue !== undefined ? optionalValue : defaultValue;\n  }\n\n  return {\n    key: orDefault(settings.key, string()),\n    values: boxArbitrariesIfNeeded(orDefault(settings.values, defaultValues()), orDefault(settings.withBoxedValues, false)),\n    maxDepth: orDefault(settings.maxDepth, 2),\n    maxKeys: orDefault(settings.maxKeys, 5),\n    withSet: orDefault(settings.withSet, false),\n    withMap: orDefault(settings.withMap, false),\n    withObjectString: orDefault(settings.withObjectString, false),\n    withNullPrototype: orDefault(settings.withNullPrototype, false),\n    withBigInt: orDefault(settings.withBigInt, false),\n    withDate: orDefault(settings.withDate, false),\n    withTypedArray: orDefault(settings.withTypedArray, false),\n    withSparseArray: orDefault(settings.withSparseArray, false)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}