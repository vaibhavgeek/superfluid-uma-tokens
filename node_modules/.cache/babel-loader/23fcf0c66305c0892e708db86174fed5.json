{"ast":null,"code":"const {\n  default: ENSJS,\n  getEnsAddress\n} = require(\"@ensdomains/ensjs\");\n\nconst {\n  isAddress\n} = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: async function (_ref) {\n    let {\n      ens,\n      inputArgs,\n      methodABI,\n      inputParams,\n      web3,\n      networkId\n    } = _ref;\n    const {\n      registryAddress\n    } = ens;\n    let args;\n\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n\n    let params;\n\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n\n    return {\n      args,\n      params\n    };\n  },\n  getNewENSJS: function (_ref2) {\n    let {\n      provider,\n      registryAddress,\n      networkId\n    } = _ref2;\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: async function (_ref3) {\n    let {\n      name,\n      provider,\n      registryAddress,\n      networkId\n    } = _ref3;\n    let ensjs;\n\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n  convertENSArgsNames: function (_ref4) {\n    let {\n      inputArgs,\n      methodABI,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref4;\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: async function (_ref5) {\n    let {\n      inputParams,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref5;\n\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      return { ...inputParams,\n        from: newFrom\n      };\n    } else {\n      return inputParams;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}